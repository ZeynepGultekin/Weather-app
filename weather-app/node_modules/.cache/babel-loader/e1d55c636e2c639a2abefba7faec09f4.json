{"ast":null,"code":"var _jsxFileName = \"/home/dci/Documents/DCI/fbw47-2/weather_deneme/weather-app/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport { useState } from \"react\"; // import {Card, Button,InputGroup, FormControl} from \"react-bootstrap\";\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"weather-icons/css/weather-icons.min.css\";\nimport Weather from \"../src/Components/Weather.js\";\nimport Search from \"../src/Components/Search.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // const getCurrentDate =(d)=>{\n  //   let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n  //   let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n  //   let day = days[d.getDay()];\n  //   let date = d.getDate();\n  //   let month= months[d.getMonth()];\n  //   let year = d.getFullYear();\n  //   return `${day} ${date} ${month} ${year}`\n  // }\n  const [weatherData, setWeatherData] = useState({});\n  const [description, setDescription] = useState(\"\");\n  const [temp, setTemp] = useState(\"\");\n  const [maxTemp, setMaxTemp] = useState(\"\");\n  const [minTemp, setMinTemp] = useState(\"\");\n  const [humidity, setHumidity] = useState(\"\");\n  const [country, setCountry] = useState(\"\");\n  const [inputCity, setInputCity] = useState(\"\");\n  const [isVisible, setIsVisible] = useState(false);\n  const API_key = \"223c292e1bb3d05f5ed0eb30034a0c0b\";\n  const url = `http://api.openweathermap.org/data/2.5/weather?q=${inputCity}&appid=${API_key}`;\n\n  const submitHandler = async e => {\n    e.preventDefault();\n    const weatherApi = await fetch(url);\n    const weatherApiJson = await weatherApi.json();\n    console.log(weatherApiJson);\n    setWeatherData(weatherApiJson);\n    setInputCity(\"\");\n    setIsVisible(true);\n    setDescription(weatherApiJson.weather[0].description);\n    setMaxTemp(Math.floor(weatherApiJson.main.temp_max - 273.25));\n    setMinTemp(Math.floor(weatherApiJson.main.temp_min - 273.25));\n    setHumidity(weatherApiJson.main.humidity);\n    setTemp(Math.floor(weatherApiJson.main.temp - 273.15));\n    setCountry(`${weatherApiJson.name}, ${weatherApiJson.sys.country}`);\n  };\n\n  const inputHandler = e => {\n    setInputCity(e.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(Search, {\n      setWeatherData: setWeatherData,\n      setIsVisible: setIsVisible,\n      setDescription: setDescription,\n      setMaxTemp: setMaxTemp,\n      setMinTemp: setMinTemp,\n      setHumidity: setHumidity,\n      setTemp: setTemp,\n      setCountry: setCountry\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(Weather, {\n      isVisible: isVisible,\n      description: description,\n      temp: temp,\n      maxTemp: maxTemp,\n      minTemp: minTemp,\n      humidity: humidity,\n      country: country\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 6\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"0vpx3uOXsF2GKZ0PHJXGRKqtHaw=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/dci/Documents/DCI/fbw47-2/weather_deneme/weather-app/src/App.js"],"names":["useState","Weather","Search","App","weatherData","setWeatherData","description","setDescription","temp","setTemp","maxTemp","setMaxTemp","minTemp","setMinTemp","humidity","setHumidity","country","setCountry","inputCity","setInputCity","isVisible","setIsVisible","API_key","url","submitHandler","e","preventDefault","weatherApi","fetch","weatherApiJson","json","console","log","weather","Math","floor","main","temp_max","temp_min","name","sys","inputHandler","target","value"],"mappings":"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","sourcesContent":["import './App.css';\nimport {useState} from \"react\";\n// import {Card, Button,InputGroup, FormControl} from \"react-bootstrap\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"weather-icons/css/weather-icons.min.css\";\nimport Weather from \"../src/Components/Weather.js\";\nimport Search from \"../src/Components/Search.js\";\n\nfunction App() {\n\n  // const getCurrentDate =(d)=>{\n\n  //   let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n  //   let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n    \n  //   let day = days[d.getDay()];\n  //   let date = d.getDate();\n  //   let month= months[d.getMonth()];\n  //   let year = d.getFullYear();\n     \n  //   return `${day} ${date} ${month} ${year}`\n  // }\n\n\n  const [weatherData, setWeatherData] = useState({});\n  const [description,setDescription] = useState(\"\");\n  const [temp,setTemp] = useState(\"\");\n  const [maxTemp, setMaxTemp] = useState(\"\");\n  const [minTemp, setMinTemp] = useState(\"\");\n  const [humidity,setHumidity] = useState(\"\");\n  const [country, setCountry] = useState(\"\");\n  const [inputCity,setInputCity] = useState(\"\");\n  const [isVisible, setIsVisible] = useState(false);\n  \n\n  const API_key = \"223c292e1bb3d05f5ed0eb30034a0c0b\";\n  const url = (`http://api.openweathermap.org/data/2.5/weather?q=${inputCity}&appid=${API_key}`)\n \n  const submitHandler = async (e)=>{\n   e.preventDefault();\n\n   const weatherApi = await fetch(url);\n   const weatherApiJson = await weatherApi.json();\n   console.log(weatherApiJson);\n   setWeatherData(weatherApiJson);\n   setInputCity(\"\");\n   setIsVisible(true);\n   \n  \n   setDescription(weatherApiJson.weather[0].description);\n   setMaxTemp(Math.floor(weatherApiJson.main.temp_max - 273.25));\n   setMinTemp(Math.floor(weatherApiJson.main.temp_min - 273.25));\n   setHumidity(weatherApiJson.main.humidity);\n   setTemp(Math.floor(weatherApiJson.main.temp - 273.15));\n   setCountry(`${weatherApiJson.name}, ${weatherApiJson.sys.country}`);\n\n   \n };\n const inputHandler = (e)=>{\n   setInputCity(e.target.value);\n\n }\n  return (\n    <div className=\"container\" >\n      {/* <h1 className=\" text-center mt-5\">Weather App</h1>\n      <InputGroup className=\"mb-3 inputGroup\" style={{width:\"30rem\"}}  >\n        <FormControl\n          placeholder=\"City name..\"\n          aria-label=\"City name\"\n          aria-describedby=\"basic-addon2\"\n          onChange ={inputHandler}\n          value={inputCity}\n        />\n        <Button type=\"submit\" onClick={submitHandler} variant=\"outline-secondary\" id=\"button-addon2\">\n          Search\n        </Button>\n      </InputGroup>\n      \n        < >\n        \n      <Card className=\"cards mt-5\" style={{width:\"30rem\", visibility: isVisible ? \"visible\" : \"hidden\"}}>\n        <h3 className=\"text-center mt-3\">{country}</h3>\n        <h6 className=\"text-center \">{getCurrentDate(new Date())}</h6>\n        <Card.Body className=\"cardBody text-center\">\n          <Card.Text>\n            <i className=\"wi wi-day-sunny display-1 mt-4\"></i>\n          </Card.Text>\n          <Card.Title> <h4>{description}</h4></Card.Title>\n          <Card.Text>\n            <h1> {temp}Â°</h1>\n          </Card.Text>\n        </Card.Body>\n        <Card.Body className=\"cardBody2\">\n          <Card.Text>\n            max: {maxTemp}Â°\n          </Card.Text>\n          <Card.Text>\n            min: {minTemp}Â°\n          </Card.Text>\n          <Card.Text>\n           humidity: {humidity}\n          </Card.Text>\n        </Card.Body>\n      </Card> */}\n        {/* </> */}\n     <Search setWeatherData={setWeatherData}\n     setIsVisible={setIsVisible}\n     setDescription={setDescription}\n     setMaxTemp={setMaxTemp}\n     setMinTemp={setMinTemp}\n     setHumidity={setHumidity}\n     setTemp={setTemp}\n     setCountry={setCountry}/>\n     <Weather\n     isVisible={isVisible}\n     description={description}\n     temp={temp}\n     maxTemp={maxTemp} \n     minTemp={minTemp}\n     humidity={humidity}\n     country={country}/>\n\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}